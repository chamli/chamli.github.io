---
layout: post
title: WWWWW
category: 3kCTF 2020
---

On July 24th we hosted the 3k international CTF, we tried to make it a good quality CTF as much as possible, we also tried not to make the challenge mostly guessable
, thats why as challenge includes a recon technique ( brute-forcing dirs/files) ,we added note that the task is kind of bounty challenge :)

To begin , the first steps were not that hard to find the vulnerability which was XXE but was a bit hard to exploit :) I will discuss this in my write up.
 .
The usual steps when checking out a web challenge or even when trying to find bugs in a website that we have never used is to check all possible functions at least on the main domain.

At the first check, we get an idea of what the website is!

![index](https://user-images.githubusercontent.com/7364615/88489371-2fa9fb80-cf94-11ea-86d0-1386be5d49d9.png)

Checking out each function and using burp to log all possible queries during that time, we found an interesting request that was triggered.

![api](https://user-images.githubusercontent.com/7364615/88489526-03db4580-cf95-11ea-8325-40a547d825b9.png)

We tried to decode the base64 data that was sent by it was not only encoded thats why we got garbage data. we get back to the source code page to check where the `api.php` is used ,but we just found some obfuscated javascript code

![js](https://user-images.githubusercontent.com/7364615/88489581-5288df80-cf95-11ea-889a-94734ed431b8.png)

We tried to deobfuscate it, but that was the worst option, it will take some time so the best solution will be to use `chrome devtools` and debug the code directly and check what is going on in our data!

Simply putting a breakpoint right after extracting the value of `email` line.

![bp](https://user-images.githubusercontent.com/7364615/88489835-38e89780-cf97-11ea-8c07-c688a7cd2867.png)

Continuing to track the functions called just before the final base64 data, we found that it was just xoring the email that was injected into a hardcoded XML document , where the key : `hSuuzuKdkvJeWgjW`

![xor](https://user-images.githubusercontent.com/7364615/88489906-e8be0500-cf97-11ea-9dbe-fc7d41de3910.png)

As we understand what the app was doing in the background, we can write simple code or just edit the XML each time using devtools.

First, to confirm that there is an XML external entity vulnerability, we can xor and encode our own payload directly without going through the javascript used on the application.

To confirm that we have XXE here, we just tried a simple payload, but as `api.php` just returns` {" result ":" ok "}` if the xml parse pass and` {"result": " error "}` if not.

and also after trying to include external url to verify pingback, we found that there was no request even a simple DNS request. So how can we confirm that we have XXE ?!

Easy, just use external url and local url to check (same as time based SQL injection :D)

![xxe](https://user-images.githubusercontent.com/7364615/88490135-a3023c00-cf99-11ea-822b-63be9052c210.png)

After encoding the url and sending these two payloads separately, we found that the payload that requests an external url takes a long time compared to the one that requests localhost which confirms that we have XXE in our case.

So as its bug bounty style based challenge, here we can ask our best friend `dirsearch` tool and he will tell us what to do: D

![dir](https://user-images.githubusercontent.com/7364615/88490248-8581a200-cf9a-11ea-8514-51519937ff70.png)

And yes :), we just got a cool output that includes results that we still haven't verified!

Digging a little deeper into the result, we found an endpoint that can be used to dump information about hotel and restaurant locations, but the most interesting part was this.

![file](https://user-images.githubusercontent.com/7364615/88490293-f628be80-cf9a-11ea-88a4-7d5e488e0ec7.png)

There was another file, visiting it it will come out

```
{"msg":"sid=mfI1xkAsOdZzHCoFTcJY8eNtiE5h4Ru0","read":"\/define.php?sid=mfI1xkAsOdZzHCoFTcJY8eNtiE5h4Ru0","write":"\/define.php?sid=mfI1xkAsOdZzHCoFTcJY8eNtiE5h4Ru0&key=test&value=test"}
```

By checking and trying multiple attempts we confirm two results, we can either dump our config settings or change them as needed, but we should use our sid in each request which looks like a sessionid value

For example, to update current values, we can just request `http://wwwweb.3k.ctf.to/define.php?sid=mfI1xkAsOdZzHCoFTcJY8eNtiE5h4Ru0&key=test&value=test` and then `http://wwwweb.3k.ctf.to/define.php?sid=mfI1xkAsOdZzHCoFTcJY8eNtiE5h4Ru0` to confirm the update

Thinking about how to use this feature like a weapon, we can just make this endpoint which can be reached from localhost too as store file, so as we need in the normal exploit a External DTD but in this case there was no outgoing port open, using a php wrapper which should be supported in this case to return our DTD content as if it had been loaded from the outside.

![sploit](https://user-images.githubusercontent.com/7364615/88490744-232aa080-cf9e-11ea-896c-0720b962fdee.png)

and the flag was : 3k{cL457rBpVxsJnRXNR9vW6uR4hbKszeFs}

Thanks for reading, well done `RedRocket` and `WreckTheLine` who were the only two teams to solve the challenge during the CTF.

See you next time :)
